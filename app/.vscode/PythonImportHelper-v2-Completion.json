[
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db.database",
        "description": "app.db.database",
        "isExtraImport": true,
        "detail": "app.db.database",
        "documentation": {}
    },
    {
        "label": "to_float",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_float",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_int",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_int",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_float",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_float",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_int",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_float",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_float",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "importPath": "app.utils.cast",
        "description": "app.utils.cast",
        "isExtraImport": true,
        "detail": "app.utils.cast",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "user_router",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "db.config",
        "description": "db.config",
        "peekOfCode": "class Settings(BaseSettings):\n    APP_NAME: str = \"Meditouch API\"\n    DB_URL: str = \"sqlite:///./app.db\"\n    SECRET_KEY: str = \"changeme\"\n    ALGORITHM: str = \"HS256\"\n    class Config:\n        env_file = \".env\"\nsettings = Settings()",
        "detail": "db.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "db.config",
        "description": "db.config",
        "peekOfCode": "settings = Settings()",
        "detail": "db.config",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "db.database",
        "description": "db.database",
        "peekOfCode": "engine = create_engine(settings.DB_URL, connect_args={\"check_same_thread\": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "db.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "db.database",
        "description": "db.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "db.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "db.database",
        "description": "db.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "db.database",
        "documentation": {}
    },
    {
        "label": "AL",
        "kind": 6,
        "importPath": "models.al",
        "description": "models.al",
        "peekOfCode": "class AL(Base):\n    __tablename__ = \"al\"\n    alcohol_result = Column() # 음주결과\n    alcohol_yang = Column()   # 음주량\n    @classmethod\n    def from_payload(cls, p: dict) -> \"AL\":\n        data = {\n            \"alcohol_result\": to_str(p.get(\"alcohol_result\")),\n            \"alcohol_yang\":   to_float(p.get(\"alcohol_yang\")),\n        }",
        "detail": "models.al",
        "documentation": {}
    },
    {
        "label": "BC",
        "kind": 6,
        "importPath": "models.bc",
        "description": "models.bc",
        "peekOfCode": "class BC(Base):\n    __tablename__ = \"bc\"\n    weight = Column()              # 체중\n    weight_result = Column()       # 체중 결과\n    fatyang = Column()             # 체지방량\n    fatyang_result = Column()      # 체지방량 결과\n    muscleyang = Column()          # 근육량\n    muscleyang_result = Column()   # 근육량 결과\n    adult_bodytype = Column()      # 성인 체형판정\n    basalmetabolism = Column()     # 기초대사량",
        "detail": "models.bc",
        "documentation": {}
    },
    {
        "label": "BP",
        "kind": 6,
        "importPath": "models.bp",
        "description": "models.bp",
        "peekOfCode": "class BP(Base):\n    __tablename__ = \"bp\"\n    high = Column()   # 144\n    low = Column()    # 92\n    pulse = Column()  # 83\n    status = Column() # 고혈압\n    @classmethod\n    def from_payload(cls, p: dict) -> \"BP\":\n        data = {\n            \"high\":  to_int(p.get(\"high\")),",
        "detail": "models.bp",
        "documentation": {}
    },
    {
        "label": "BS",
        "kind": 6,
        "importPath": "models.bs",
        "description": "models.bs",
        "peekOfCode": "class BS(Base):\n    __tablename__ = \"bs\"\n    status = Column()          # 측정상태\n    bloodsugar_type = Column() # 식전\n    bloodsugar = Column()      # 혈당\n    col_total = Column()       # 콜레스테롤 Total\n    col_tri = Column()         # 중성지방\n    col_ldl = Column()         # LDL\n    col_hdl = Column()         # HDL\n    @classmethod",
        "detail": "models.bs",
        "documentation": {}
    },
    {
        "label": "CM",
        "kind": 6,
        "importPath": "models.cm",
        "description": "models.cm",
        "peekOfCode": "class CM(Base):\n    __tablename__ = \"cm\"\n    value = Column() # 색각 정상\n    @classmethod\n    def from_payload(cls, p: dict) -> \"CM\":\n        return cls(value=to_str(p.get(\"value\")) or to_int(p.get(\"value\")))",
        "detail": "models.cm",
        "documentation": {}
    },
    {
        "label": "HS",
        "kind": 6,
        "importPath": "models.hs",
        "description": "models.hs",
        "peekOfCode": "class HS(Base):\n    __tablename__ = \"hs\"\n    height = Column() # 4\n    weight = Column() # 5\n    bmi = Column()    # BMI\n    status = Column() # HS정상\n    @classmethod\n    def from_payload(cls, p: dict) -> \"HS\":\n        data = {\n            \"height\": to_float(p.get(\"height\")),",
        "detail": "models.hs",
        "documentation": {}
    },
    {
        "label": "LU",
        "kind": 6,
        "importPath": "models.lu",
        "description": "models.lu",
        "peekOfCode": "class LU(Base):\n    __tablename__ = \"lu\"\n    # 1차\n    fvc_1 = Column()\n    fvc_p_1 = Column()\n    fev1_1 = Column()\n    fev1_p_1 = Column()\n    fev1fvc_1 = Column()\n    fev1fvc_status_1 = Column()\n    fef2575_1 = Column()",
        "detail": "models.lu",
        "documentation": {}
    },
    {
        "label": "ST",
        "kind": 6,
        "importPath": "models.st",
        "description": "models.st",
        "peekOfCode": "class ST(Base):\n    __tablename__ = \"st\"\n    heartrate_avg = Column()            # 평균_심박수\n    heartrate_score = Column()          # 심박수 점수\n    heartrate_step = Column()           # 심박수 단계\n    heartrate_ng = Column()             # 이상 심박수\n    jayul_activity_score = Column()     # 자율신경_활성도_점수\n    jayul_activity_step = Column()      # 자율신경_활성도_단계\n    piro_score = Column()               # 피로도_점수\n    piro_step = Column()                # 피로도_단계",
        "detail": "models.st",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String(50), unique=True, index=True)\n    email = Column(String(120), unique=True, index=True)\n    password = Column(String(255))",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "VA",
        "kind": 6,
        "importPath": "models.va",
        "description": "models.va",
        "peekOfCode": "class VA(Base):\n    __tablename__ = \"va\"\n    left = Column()          # 6\n    left_status = Column()   # 좌안정상\n    right = Column()         # 7\n    right_status = Column()  # 우안정상\n    status = Column()        # VA정상\n    @classmethod\n    def from_payload(cls, p: dict) -> \"VA\":\n        data = {",
        "detail": "models.va",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "request.user_schema",
        "description": "request.user_schema",
        "peekOfCode": "class UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    class Config:\n        orm_mode = True",
        "detail": "request.user_schema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "request.user_schema",
        "description": "request.user_schema",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    class Config:\n        orm_mode = True",
        "detail": "request.user_schema",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "response.user_schema",
        "description": "response.user_schema",
        "peekOfCode": "class UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    class Config:\n        orm_mode = True",
        "detail": "response.user_schema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "response.user_schema",
        "description": "response.user_schema",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n    class Config:\n        orm_mode = True",
        "detail": "response.user_schema",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "routers.auth_router",
        "description": "routers.auth_router",
        "peekOfCode": "def login():\n    return {\"message\": \"Auth login endpoint\"}",
        "detail": "routers.auth_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routers.auth_router",
        "description": "routers.auth_router",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/login\")\ndef login():\n    return {\"message\": \"Auth login endpoint\"}",
        "detail": "routers.auth_router",
        "documentation": {}
    },
    {
        "label": "to_int",
        "kind": 2,
        "importPath": "utils.cast",
        "description": "utils.cast",
        "peekOfCode": "def to_int(v: Any) -> Optional[int]:\n    if v is None or v == \"\":\n        return None\n    try:\n        if isinstance(v, bool):\n            return int(v)\n        return int(float(v))  # \"55\", \"55.0\" 모두 처리\n    except (ValueError, TypeError):\n        return None\ndef to_float(v: Any) -> Optional[float]:",
        "detail": "utils.cast",
        "documentation": {}
    },
    {
        "label": "to_float",
        "kind": 2,
        "importPath": "utils.cast",
        "description": "utils.cast",
        "peekOfCode": "def to_float(v: Any) -> Optional[float]:\n    if v is None or v == \"\":\n        return None\n    try:\n        if isinstance(v, bool):\n            return float(int(v))\n        return float(v)\n    except (ValueError, TypeError):\n        return None\ndef to_str(v: Any) -> Optional[str]:",
        "detail": "utils.cast",
        "documentation": {}
    },
    {
        "label": "to_str",
        "kind": 2,
        "importPath": "utils.cast",
        "description": "utils.cast",
        "peekOfCode": "def to_str(v: Any) -> Optional[str]:\n    if v is None:\n        return None\n    s = str(v).strip()\n    return s if s != \"\" else None\ndef to_dt(v: Any) -> Optional[datetime]:\n    # ISO8601 \"2025-10-14T09:01:42.000Z\" 같은 형태 처리\n    if v in (None, \"\"):\n        return None\n    try:",
        "detail": "utils.cast",
        "documentation": {}
    },
    {
        "label": "to_dt",
        "kind": 2,
        "importPath": "utils.cast",
        "description": "utils.cast",
        "peekOfCode": "def to_dt(v: Any) -> Optional[datetime]:\n    # ISO8601 \"2025-10-14T09:01:42.000Z\" 같은 형태 처리\n    if v in (None, \"\"):\n        return None\n    try:\n        # 필요 시 zoneinfo/pendulum로 확장 가능\n        return datetime.fromisoformat(str(v).replace(\"Z\", \"+00:00\"))\n    except Exception:\n        return None",
        "detail": "utils.cast",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def root():\n    return {\"message\": \"Welcome to Meditouch API\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"Meditouch API\", version=\"1.0.0\")\napp.include_router(user_router.router, prefix=\"/users\", tags=[\"Users\"])\napp.include_router(auth_router.router, prefix=\"/auth\", tags=[\"Auth\"])\napp.include_router(auth_router.router, prefix=\"/mtm\", tags=[\"Mtm\"])\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Welcome to Meditouch API\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BP",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class BP(Base):\n    __tablename__ = \"bp\"\n    high = Column()   # 144\n    low = Column()    # 92\n    pulse = Column()  # 83\n    status = Column() # 고혈압\nclass HS(Base):\n    __tablename__ = \"hs\"\n    height = Column() # 4\n    weight = Column() # 5",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "HS",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class HS(Base):\n    __tablename__ = \"hs\"\n    height = Column() # 4\n    weight = Column() # 5\n    bmi = Column()    # BMI\n    status = Column() # HS정상\nclass VA(Base):\n    __tablename__ = \"va\"\n    left = Column()          # 6\n    left_status = Column()   # 좌안정상",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "VA",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class VA(Base):\n    __tablename__ = \"va\"\n    left = Column()          # 6\n    left_status = Column()   # 좌안정상\n    right = Column()         # 7\n    right_status = Column()  # 우안정상\n    status = Column()        # VA정상\nclass CM(Base):\n    __tablename__ = \"cm\"\n    value = Column() # 색각 정상",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "CM",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class CM(Base):\n    __tablename__ = \"cm\"\n    value = Column() # 색각 정상\nclass BC(Base):\n    __tablename__ = \"bc\"\n    weight = Column()              # 체중\n    weight_result = Column()       # 체중 결과\n    fatyang = Column()             # 체지방량\n    fatyang_result = Column()      # 체지방량 결과\n    muscleyang = Column()          # 근육량",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "BC",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class BC(Base):\n    __tablename__ = \"bc\"\n    weight = Column()              # 체중\n    weight_result = Column()       # 체중 결과\n    fatyang = Column()             # 체지방량\n    fatyang_result = Column()      # 체지방량 결과\n    muscleyang = Column()          # 근육량\n    muscleyang_result = Column()   # 근육량 결과\n    adult_bodytype = Column()      # 성인 체형판정\n    basalmetabolism = Column()     # 기초대사량",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "ST",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class ST(Base):\n    __tablename__ = \"st\"\n    heartrate_avg = Column()            # 평균_심박수\n    heartrate_score = Column()          # 심박수 점수\n    heartrate_step = Column()           # 심박수 단계\n    heartrate_ng = Column()             # 이상 심박수\n    jayul_activity_score = Column()     # 자율신경_활성도_점수\n    jayul_activity_step = Column()      # 자율신경_활성도_단계\n    piro_score = Column()               # 피로도_점수\n    piro_step = Column()                # 피로도_단계",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "AL",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class AL(Base):\n    __tablename__ = \"al\"\n    alcohol_result = Column() # 음주결과\n    alcohol_yang = Column()   # 음주량\nclass BS(Base):\n    __tablename__ = \"bs\"\n    status = Column()          # 측정상태\n    bloodsugar_type = Column() # 식전\n    bloodsugar = Column()      # 혈당\n    col_total = Column()       # 콜레스테롤 Total",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "BS",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class BS(Base):\n    __tablename__ = \"bs\"\n    status = Column()          # 측정상태\n    bloodsugar_type = Column() # 식전\n    bloodsugar = Column()      # 혈당\n    col_total = Column()       # 콜레스테롤 Total\n    col_tri = Column()         # 중성지방\n    col_ldl = Column()         # LDL\n    col_hdl = Column()         # HDL\nclass LU(Base):",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "LU",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class LU(Base):\n    __tablename__ = \"lu\"\n    # 1차 측정\n    fvc_1 = Column()               # 노력성 폐활량\n    fvc_p_1 = Column()             # fvc 정상예측치\n    fev1_1 = Column()              # 1초간 노력성호기량\n    fev1_p_1 = Column()            # fev1 정상예측치\n    fev1fvc_1 = Column()           # fev1/fvc 1초율\n    fev1fvc_status_1 = Column()    # fev1/fvc 결과\n    fef2575_1 = Column()           # FEF25-75",
        "detail": "test",
        "documentation": {}
    }
]